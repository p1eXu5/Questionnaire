// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Questionnaire.Data.DataContext;

namespace Questionnaire.Data.Migrations
{
    [DbContext(typeof(QuestionnaireDbContext))]
    partial class QuestionnaireDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Questionnaire.Data.Models.AnswerMultipleChoice", b =>
                {
                    b.Property<int>("FirmId");

                    b.Property<int>("Num");

                    b.Property<int>("Answer");

                    b.Property<int?>("QuestionId");

                    b.HasKey("FirmId", "Num");

                    b.HasIndex("QuestionId");

                    b.ToTable("MultipleChoiceAnswers");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.AnswerOpen", b =>
                {
                    b.Property<int>("FirmId");

                    b.Property<int>("Num");

                    b.Property<string>("Answer");

                    b.Property<int?>("QuestionId");

                    b.HasKey("FirmId", "Num");

                    b.HasIndex("QuestionId");

                    b.ToTable("OpenAnswers");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.Firm", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CityId");

                    b.Property<int>("FirmTypeId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("FirmTypeId");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.FirmType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FirmTypes");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.QuestionMultipleChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SectionId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("MultipleChoiceQuestions");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.QuestionOpen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SectionId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("OpenQuestions");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.AnswerMultipleChoice", b =>
                {
                    b.HasOne("Questionnaire.Data.Models.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questionnaire.Data.Models.QuestionMultipleChoice", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.AnswerOpen", b =>
                {
                    b.HasOne("Questionnaire.Data.Models.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questionnaire.Data.Models.QuestionOpen", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Questionnaire.Data.Models.City", b =>
                {
                    b.HasOne("Questionnaire.Data.Models.Region", "Region")
                        .WithMany("CityCollection")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questionnaire.Data.Models.Firm", b =>
                {
                    b.HasOne("Questionnaire.Data.Models.City", "City")
                        .WithMany("FirmCollection")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questionnaire.Data.Models.FirmType", "FirmType")
                        .WithMany("FirmCollection")
                        .HasForeignKey("FirmTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questionnaire.Data.Models.QuestionMultipleChoice", b =>
                {
                    b.HasOne("Questionnaire.Data.Models.Section", "Section")
                        .WithMany("QuestionMultipleChoiceCollection")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questionnaire.Data.Models.QuestionOpen", b =>
                {
                    b.HasOne("Questionnaire.Data.Models.Section", "Section")
                        .WithMany("QuestionOpenCollection")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questionnaire.Data.Models.Section", b =>
                {
                    b.HasOne("Questionnaire.Data.Models.Category", "Category")
                        .WithMany("Sections")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
